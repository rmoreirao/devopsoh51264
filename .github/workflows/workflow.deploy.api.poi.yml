name: "Deploy - api-poi (.NET Core)"

# run on push to main branch
on:
  push:
    branches:
      - main
    paths:
      - "apis/poi/**"
  workflow_dispatch:

# Set envs
env:
  WORKDIR: "apis/poi/web"
  DOCKER_IMAGE_BASE_NAME: "devopsoh/api-poi"
  API_NAME: "poi"
  RESOURCES_PREFIX: "${{ secrets.RESOURCES_PREFIX }}" # hardcoded or dynamic based on repo name

# Set defaults for GitHub Actions runner
defaults:
  run:
    working-directory: "apis/poi/web"

jobs:
  test:
    name: "Build"
    runs-on: ubuntu-latest

    steps:
    - name: Install Apache Bench
      working-directory: ""
      run: sudo apt-get install  apache2-utils
        
    - name: Load Test 50 percent
      working-directory: ""
      run: | 
        ab -t 10 -c 10 https://devopsoh51264poi-staging.azurewebsites.net/api/version/poi

  build:
    name: "Build"
    runs-on: ubuntu-latest
    needs: test
    # outputs:
    #   DOCKER_IMAGE_FULL_NAME: ${{ steps.dockerfullname.outputs.DOCKER_IMAGE_FULL_NAME }}
    steps:
      - uses: actions/checkout@v2

      # AZURE CONTAINER REGISTRY
      # - name: Get docker image full name
      #   run: |
      #     DOCKER_IMAGE_FULL_NAME=${{ secrets.RESOURCES_PREFIX }}cr.azurecr.io/${{ env.DOCKER_IMAGE_BASE_NAME }}

      #     # Set for current Job
      #     echo "DOCKER_IMAGE_FULL_NAME=${DOCKER_IMAGE_FULL_NAME}" >> ${GITHUB_ENV}

      #     # Set for next Job
      #     echo "::set-output name=DOCKER_IMAGE_FULL_NAME::${DOCKER_IMAGE_FULL_NAME}"
      #   id: dockerfullname

      - name: "Azure Login"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Build Docker image using Azure Container Registry"
        uses: Azure/cli@v1
        with:
          inlineScript: az acr build --image ${{ secrets.RESOURCES_PREFIX }}cr.azurecr.io/${{ env.DOCKER_IMAGE_BASE_NAME }}:${{ github.run_id }} --registry ${{ secrets.RESOURCES_PREFIX }}cr.azurecr.io --resource-group ${{ secrets.RESOURCES_PREFIX }}rg --build-arg build_version=${{ github.run_id }} --file ${{ env.WORKDIR }}/Dockerfile ${{ env.WORKDIR }}
  
  

  staging:
    name: "Staging (Blue)"
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: poi-staging
    env:
      RESOURCES_PREFIX: ${{ secrets.RESOURCES_PREFIX }}
      # DOCKER_IMAGE_FULL_NAME: "${{ needs.build.outputs.DOCKER_IMAGE_FULL_NAME }}"
    steps:
      # Login to Azure with Service Principal
      - name: "Azure Login"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Deploy to Staging"
        uses: Azure/cli@v1
        with:
          inlineScript: az webapp config container set --name ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }} --slot staging --resource-group ${{ secrets.RESOURCES_PREFIX }}rg --docker-custom-image-name '${{ secrets.RESOURCES_PREFIX }}cr.azurecr.io/${{ env.DOCKER_IMAGE_BASE_NAME }}:${{ github.run_id }}' --docker-registry-server-url 'https://${{ secrets.RESOURCES_PREFIX }}cr.azurecr.io'

      - name: Check the deployed service health check
        uses: jtalk/url-health-check-action@v2
        with:
          url: https://${{ secrets.RESOURCES_PREFIX }}${{ env.API_NAME }}-staging.azurewebsites.net/api/healthcheck/${{ env.API_NAME }}
          follow-redirect: true
          max-attempts: 6
          retry-delay: 10s
          retry-all: true
      - name: Install Apache Bench
        working-directory: ""
        run: sudo apt-get install  apache2-utils
        
      - name: Load Test 
        working-directory: ""
        run: | 
          failures=$(ab -t 10 -c 10 https://${{ secrets.RESOURCES_PREFIX }}${{ env.API_NAME }}-staging.azurewebsites.net/api/version/poi | grep -Poe 'Failed requests: \K.*' | sed 's/^ *//g')
          if [ "$failures" -gt "0" ];then
            exit -1
          fi

  route_traffic_fifty_percent_validate:
    name: "Route 50% of Production Traffic to Stating"
    needs: staging
    runs-on: ubuntu-latest
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }} 
    
    - name: Swap staging to production
      run: |
        az webapp traffic-routing set --distribution staging=50 --name ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }} --resource-group ${{ secrets.RESOURCES_PREFIX }}rg
    
    - name: Install Apache Bench
      working-directory: ""
      run: sudo apt-get install  apache2-utils
        
    - name: Load Test 50 percent
      working-directory: ""
      run: | 
        failures=$(ab -t 10 -c 10 https://${{ secrets.RESOURCES_PREFIX }}${{ env.API_NAME }}.azurewebsites.net/api/version/poi | grep -Poe 'Failed requests: \K.*' | sed 's/^ *//g')
        if [ "$failures" -gt "0" ];then
          exit -1
        fi

    - name: Rollback Production
      if: failure()
      run: |
        az webapp traffic-routing clear --name ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }} --resource-group ${{ secrets.RESOURCES_PREFIX }}rg

  production:
    name: "Production (Red)"
    needs: staging
    runs-on: ubuntu-latest
    environment:
      name: poi-production
    env:
      RESOURCES_PREFIX: ${{ secrets.RESOURCES_PREFIX }}
      # DOCKER_IMAGE_FULL_NAME: "${{ needs.build.outputs.DOCKER_IMAGE_FULL_NAME }}"
    steps:
      # Login to Azure with Service Principal
      - name: "Azure Login"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Clear routing
        run: |
          az webapp traffic-routing clear --name ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }} --resource-group ${{ secrets.RESOURCES_PREFIX }}rg

      # Set new Docker image in WebApp
      # - name: Azure WebApp
      #   id: deploy-to-webapp
      #   uses: Azure/webapps-deploy@v2
      #   with:
      #     app-name: ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }}
      #     images: "${{ env.DOCKER_IMAGE_FULL_NAME }}:${{ github.run_id }}"
      - name: "Deploy to Production - Swap from Staging"
        uses: Azure/cli@v1
        with:
          inlineScript: az webapp deployment slot swap  -g ${{ secrets.RESOURCES_PREFIX }}rg -n ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }} --slot staging --target-slot production

      - name: Check the deployed service health check
        uses: jtalk/url-health-check-action@v2
        with:
          url: https://${{ secrets.RESOURCES_PREFIX }}${{ env.API_NAME }}.azurewebsites.net/api/healthcheck/${{ env.API_NAME }}
          follow-redirect: true
          max-attempts: 6
          retry-delay: 10s
          retry-all: true

      - name: "If Failure Rollback Production"
        if: failure()
        uses: Azure/cli@v1
        with:
          inlineScript: az webapp deployment slot swap  -g ${{ secrets.RESOURCES_PREFIX }}rg -n ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }} --slot staging --target-slot production
        