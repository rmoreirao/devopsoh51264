name: "PR - api-poi (.NET Core) v2"

on:
  pull_request:
    branches:
      - main
    paths:
      - "apis/poi/**"
  workflow_dispatch:

# Set envs
env:
  DOTNET_VERSION: "3.1.x"

# Set defaults for GitHub Actions runner
defaults:
  run:
    working-directory: "apis/poi"

jobs:
  buildtest:
    name: "Build and Test"
    runs-on: ubuntu-latest
    outputs:
      test_results: ${{ steps.unittestoutput.outputs.test_results }}
      test_outcome: ${{ steps.unittestoutput.outputs.test_outcome }}
    steps:
      - uses: actions/checkout@v2

      # Gitleaks is really not working!! 
      # - name: "Check for secrets with Gitleaks"
      #   id: gitleaks
      #   uses: DariuszPorowski/github-action-gitleaks@v2
      #   with:
      #     source: "iac/terraform/"
      #     config: "gitleaks/UDMSecretChecksv8.toml"
      #     report_format: "sarif"
      #     fail: false

      # # Official Action for Gitleaks which has less configuration options
      # # - name: "Check for secrets with Gitleaks"
      # #   id: gitleaks2
      # #   uses: zricethezav/gitleaks-action@master
      # #   with:
      # #     config-path: "gitleaksconfig.toml"

      # - name: "Output from the gitleaks step"
      #   run: |
      #     echo "exitcode: ${{ steps.gitleaks.outputs.exitcode }}"
      #     echo "result: ${{ steps.gitleaks.outputs.result }}"
      #     echo "output: ${{ steps.gitleaks.outputs.output }}"
      #     echo "command: ${{ steps.gitleaks.outputs.command }}"
      #     echo "report: ${{ steps.gitleaks.outputs.report }}"

      # # SARIF upload for repositories with GitHub Advanced Security
      # - name: "Upload SARIF report"
      #   if: steps.gitleaks.outputs.exitcode == 1
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: ${{ steps.gitleaks.outputs.report }}

      # - name: "Stop workflow if secrets detected"
      #   if: steps.gitleaks.outputs.exitcode == 1
      #   run: exit 1

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Add Code Coverage Tools
        working-directory: apis/poi/tests/UnitTests
        run: dotnet add package coverlet.msbuild

      - name: "Restore dependencies"
        run: dotnet restore

      - name: "Build the App"
        run: dotnet build --no-restore

      - name: .NET Test
        run: dotnet test --no-restore --verbosity normal tests/UnitTests  /p:CollectCoverage=true /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          path-to-lcov: tests/UnitTests/lcov/coverage.info
          flag-name: Unit

      - name: "Run Unit Tests"
        id: unittest
        run: |
          dotnet test --no-build --filter "FullyQualifiedName~UnitTest" |& tee test_results.txt

          # break if 'dotnet test' failed
          test ${PIPESTATUS[0]} -eq 0
        continue-on-error: true

      - name: "Transform Unit Tests output"
        id: unittestoutput
        if: steps.unittest.outcome == 'failure'
        run: |
          test_results=$(cat test_results.txt)
          test_results="${test_results//'%'/'%25'}"
          test_results="${test_results//$'\n'/'%0A'}"
          test_results="${test_results//$'\r'/'%0D'}"
          echo "::set-output name=test_results::${test_results}"
          echo "::set-output name=test_outcome::${{ steps.unittest.outcome }}"

  reportbug:
    name: "Report Bug for non PR runs"
    needs: buildtest
    if: needs.buildtest.outputs.test_outcome == 'failure' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: "Create an issue (bug)"
        uses: actions/github-script@v5.0.0
        env:
          UNIT_TEST_RESULTS: "${{ needs.buildtest.outputs.test_results }}"
        with:
          script: |
            const body = `#### Unit Tests \`${{ needs.buildtest.outputs.test_outcome }}\`
            <details>
            <summary>Workflow details</summary>\n
            Workflow name - \`${{ github.workflow }}\`
            Action - \`${{ github.event_name }}\`
            Job - \`${{ github.job }}\`
            PR - #${{ github.event.number }}
            </details>\n
            <details>
            <summary>Unit Tests details</summary>\n
            \`\`\`
            ${process.env.UNIT_TEST_RESULTS}
            \`\`\`\n
            </details>\n
            Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\``;

            const title = `Unit Tests ${{ needs.buildtest.outputs.test_outcome }}`

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug'],
              assignees: [context.actor]
            })

      # break the workflow
      - name: "Unit Tests Status"
        env:
          UNIT_TEST_RESULTS: "${{ needs.buildtest.outputs.test_results }}"
        run: |
          echo "${{ env.UNIT_TEST_RESULTS }}"
          exit 1

  reportprcomment:
    name: "Report to PR comment fo PR runs"
    needs: buildtest
    if: needs.buildtest.outputs.test_outcome == 'failure' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: "Create a PR comment"
        uses: actions/github-script@v5.0.0
        env:
          UNIT_TEST_RESULTS: "${{ needs.buildtest.outputs.test_results }}"
        with:
          script: |
            const body = `#### Unit Tests \`${{ needs.buildtest.outputs.test_outcome }}\`
            <details>
            <summary>Details</summary>\n
            \`\`\`
            ${process.env.UNIT_TEST_RESULTS}
            \`\`\`\n
            </details>\n
            Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\``;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            })

      # break the workflow
      - name: "Unit Tests Status"
        env:
          UNIT_TEST_RESULTS: "${{ needs.buildtest.outputs.test_results }}"
        run: |
          echo "${{ env.UNIT_TEST_RESULTS }}"
          exit 1
